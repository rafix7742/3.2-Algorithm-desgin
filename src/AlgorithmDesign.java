/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Hamzi
 */
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
//come back to do the negative cases later
public class AlgorithmDesign extends javax.swing.JFrame {

    /**
     * Creates new form AlgorithmDesign
     */
    
    public AlgorithmDesign() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        GUIBackground = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        FactBtn = new javax.swing.JButton();
        PrimeBtn = new javax.swing.JButton();
        FibBtn = new javax.swing.JButton();
        FactTxt = new javax.swing.JTextField();
        PrimeTxt = new javax.swing.JTextField();
        FibTxt = new javax.swing.JTextField();
        Factlbl = new javax.swing.JLabel();
        Primelbl = new javax.swing.JLabel();
        Fiblbl = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Sylfaen", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("Number Program");

        jLabel2.setFont(new java.awt.Font("Sylfaen", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 0));
        jLabel2.setText("Insert a number and click the button get the factorial of that number");

        jLabel3.setFont(new java.awt.Font("Sylfaen", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 0));
        jLabel3.setText("Insert a number and click the button to check if the number entered is prime");

        jLabel4.setFont(new java.awt.Font("Sylfaen", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 0));
        jLabel4.setText("Insert a number and click the button to get the corresponding Fibonacci number");

        FactBtn.setText("Calculate");
        FactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FactBtnActionPerformed(evt);
            }
        });

        PrimeBtn.setText("Calculate");
        PrimeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrimeBtnActionPerformed(evt);
            }
        });

        FibBtn.setText("Calculate");
        FibBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FibBtnActionPerformed(evt);
            }
        });

        FactTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FactTxtActionPerformed(evt);
            }
        });

        PrimeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrimeTxtActionPerformed(evt);
            }
        });

        FibTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FibTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GUIBackgroundLayout = new javax.swing.GroupLayout(GUIBackground);
        GUIBackground.setLayout(GUIBackgroundLayout);
        GUIBackgroundLayout.setHorizontalGroup(
            GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GUIBackgroundLayout.createSequentialGroup()
                .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GUIBackgroundLayout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GUIBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(GUIBackgroundLayout.createSequentialGroup()
                                .addComponent(FibTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FibBtn))
                            .addGroup(GUIBackgroundLayout.createSequentialGroup()
                                .addComponent(FactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FactBtn)
                                .addGap(18, 18, 18)
                                .addComponent(Factlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(GUIBackgroundLayout.createSequentialGroup()
                                .addComponent(PrimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PrimeBtn)
                                .addGap(18, 18, 18)
                                .addComponent(Primelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(GUIBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Fiblbl, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        GUIBackgroundLayout.setVerticalGroup(
            GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GUIBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(29, 29, 29)
                .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Factlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jLabel3)
                .addGap(65, 65, 65)
                .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PrimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PrimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Primelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78)
                .addComponent(jLabel4)
                .addGap(57, 57, 57)
                .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(GUIBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FibBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FibTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Fiblbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GUIBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GUIBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FactBtnActionPerformed
      try{
          int UsrNumFInt = Integer.parseInt(FactTxt.getText());
          
         if(UsrNumFInt >14){
             //Check to see if the number entered is too big in order to place it in decimal format
          if(UsrNumFInt<=500000){ //failsafe
              //A fail safe so the user does not have a wait on a calculation that crashes the program or exceeds a 1 minute wait time
              //500000 was the last number that ran at a reasonable amount of time even if it still is a few seconds wait
              //to remove this you get rid of this if statement
      int UsrNumF = UsrNumFInt;
      BigInteger Ans = Factcalc(UsrNumF);
      //Call to below to get the BigInteger value of the factorial(originally long was used but as BigInteger has no limit it was used instead
           DecimalFormat decimalFormat = new DecimalFormat("0.#######E0");
           String FAns = decimalFormat.format(Ans);
           //The change from format of the number so it shows the exponant value rather than the raw large number
           Factlbl.setText(String.valueOf("The factorial of "+UsrNumF+" is: "+FAns));
          }else{//failsafe
              Factlbl.setText(String.valueOf("The program does not calculate past 500000 as this causes lag or the program to take more than 1 minute to respond"));
              
          }//failsafe
          
         }else if(UsrNumFInt >=0 ){
             int UsrNumF = UsrNumFInt;
      BigInteger Ans = Factcalc(UsrNumF);
       Factlbl.setText(String.valueOf("The factorial of "+UsrNumF+" is: "+Ans));
       //This is ran if the number is non negative or if it is too small to be put in exponent form
         }else{
             Factlbl.setText(String.valueOf("Please insert a non negative number"));
             //Just a check for negative numbers
         }  
      }
      catch(NumberFormatException e){
          Factlbl.setText(String.valueOf("Please enter a valid number"));
          //Just a check for invalid inputs
      }

        
      
    }//GEN-LAST:event_FactBtnActionPerformed

    private void PrimeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrimeBtnActionPerformed
       try{
           //I decided to not use BigInteger as the comparison is different in that case and long creates a reasonable cap for the computer to process
      long UsrNumPLong =  Long.parseLong(PrimeTxt.getText());
        long UsrCompLong = UsrNumPLong;
        long MaxPVal = (85000*5000);
        MaxPVal = MaxPVal*10;
        //For some reason adding the extra 0 causes the number to turn 0 even though it is less than 9 trillion(long limit)
        //Fiblbl.setText(String.valueOf(MaxPVal));
        //testing
        int  i = 2;
        boolean flag = false;
        //this part is for the while loop, i is 2 as it does not need to divide after the number turns to 1
     if(UsrCompLong> MaxPVal){
         Primelbl.setText(String.valueOf("Numbers larger than 4250000000 cause this program to lag, please enter a smaller number"));
         //This limit was found after LOTs of trial and error, it does not exceed the long limit but is the highest my computer can process before giving an error
     }
        else if(UsrCompLong >1){
        while(i <= UsrNumPLong/2)
        {
            
            //Fiblbl.setText(String.valueOf(UsrNumPInt));
            // condition for nonprime number
            if(UsrNumPLong % i == 0)
            {
                flag = true;
                
            }

            i++;
        }
        //This loop checks if there ever is a remainder and if it does turn one then the number is not prime
        
        //Primelbl.setText(String.valueOf(flag));
        if(flag==true){
            Primelbl.setText(String.valueOf(UsrNumPLong +" is not a prime number"));
        }else if(flag==false){
             Primelbl.setText(String.valueOf(UsrNumPLong +" is a prime number"));
        }}else if (UsrCompLong <=0){
            Primelbl.setText(String.valueOf("Please enter a non-zero and non-negative number"));
        }else{
            Primelbl.setText(String.valueOf("1 is not a prime number"));
            //This is for the case of 1 as it's mot prime but the programs process thinks it is
        }
       }catch(NumberFormatException e){
           Primelbl.setText(String.valueOf("Please enter a valid number"));
           //In case of user entered letters or invalid numbers
       }catch(ArithmeticException e){
           Primelbl.setText(String.valueOf("Please try again"));
           //This is just for the testing process after the limit i had set but if there is a way the user can break it this catches it
       }
        
    }//GEN-LAST:event_PrimeBtnActionPerformed

    private void FibBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FibBtnActionPerformed
        //This portion will have a long value rather than BigInteger as it has a lot more to process
        try{
       //String UsrFibstr = FactTxt.getText();
       //int i = Integer.parseInt(UsrFibstr);
       int UsrNumFib =  Integer.parseInt(FibTxt.getText());
        if(UsrNumFib>60){
            
        BigInteger val = fibonacci(UsrNumFib);
        DecimalFormat decimalFormat = new DecimalFormat("0.#######E0");
           String FAnsFib = decimalFormat.format(val);
            Fiblbl.setText(String.valueOf(FAnsFib+" is number "+UsrNumFib+" in the fibonacci sequence"));
        }else if(UsrNumFib<0){
             Fiblbl.setText(String.valueOf("Please enter a non-negative value"));
             
        }
        
        else{
            BigInteger val = fibonacci(UsrNumFib);
            Fiblbl.setText(String.valueOf(val+" is number "+UsrNumFib+" in the fibonacci sequence"));
        }
        
        
        }
        catch(NumberFormatException e ){
            Fiblbl.setText(String.valueOf("Please enter a valid number"));
        }
    }//GEN-LAST:event_FibBtnActionPerformed

    private void FactTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FactTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FactTxtActionPerformed

    private void PrimeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrimeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrimeTxtActionPerformed

    private void FibTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FibTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FibTxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static BigInteger Factcalc(int calc) {
         BigInteger factorial = BigInteger.ONE;
        int i;  
        for(i=1;i<=calc;i++){    
      
      factorial = factorial.multiply(BigInteger.valueOf(i));
        
        }
        
        return factorial;
}
    public static BigInteger fibonacci(int fib) {

        if (fib <= 0) return BigInteger.valueOf(fib);
        //Just the first part of a 0 check
        BigInteger first = BigInteger.ZERO;
        BigInteger next = BigInteger.ONE;
        BigInteger sum;
        //Biginteger values are declared differently and are added differently
        for (int i = 2; i <= fib; i++) {

            sum = first;
            first = next;
            next = sum.add(first);
           //in the for loop values have to be integers instead of BigInteger
        }

        return next;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlgorithmDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlgorithmDesign().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FactBtn;
    private javax.swing.JTextField FactTxt;
    private javax.swing.JLabel Factlbl;
    private javax.swing.JButton FibBtn;
    private javax.swing.JTextField FibTxt;
    private javax.swing.JLabel Fiblbl;
    private javax.swing.JPanel GUIBackground;
    private javax.swing.JButton PrimeBtn;
    private javax.swing.JTextField PrimeTxt;
    private javax.swing.JLabel Primelbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
//Bin for experimental or old code
//DecimalFormat decimalFormat = new DecimalFormat("0000.0");
       //String Rans =decimalFormat.format(Ans);


//BigInteger RansB = new BigDecimal(Ans).toBigInteger();
//DecimalFormat RansC= new DecimalFormat("0.###E0");
//String.valueOf(RansB.doubleValue());
//BigInteger MaxExpVal = BigInteger.valueOf(300030003*3333);
       
       //res = Ans.compareTo(MaxExpVal);
//      catch(){
//          
//      }
//      try{
//      long UsrNumF = UsrNumFInt;
//        long i,FactVal=1;  
//        for(i=1;i<=UsrNumF;i++){    
//      FactVal=FactVal*i;    
//      
//  }    
//        Factlbl.setText(String.valueOf("The factorial of "+UsrNumF+" is: "+FactVal));
//      }catch(Exception e){
//      Factlbl.setText(String.valueOf("Please insert a smaller number (25 or less)"));
//  }
//BigInteger AnswerL = BigInteger.valueOf(FactVal);